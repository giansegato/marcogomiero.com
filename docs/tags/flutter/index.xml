<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flutter on Marco Gomiero</title>
    <link>https://www.marcogomiero.com/tags/flutter/</link>
    <description>Recent content in Flutter on Marco Gomiero</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 16 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.marcogomiero.com/tags/flutter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flutter or React Native, a cross-platfrom dilemma - How they work - (Part 3)</title>
      <link>https://www.marcogomiero.com/posts/2020/rn-flutter-dilemma-3-under-hood/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcogomiero.com/posts/2020/rn-flutter-dilemma-3-under-hood/</guid>
      <description>Welcome to the third part of this article series about React Native and Flutter. In the latest episode, we have talked about User Interfaces and how to build them in the two frameworks. In this article, we&amp;rsquo;ll go deeper under the hoods to understand how things work. But I will not go deeper with lot&amp;rsquo;s of details and implementation things, because I want to make you understand how the thing works at a high level.</description>
    </item>
    
    <item>
      <title>Flutter or React Native, a cross-platform dilemma - How to build User Interfaces - (Part 2)</title>
      <link>https://www.marcogomiero.com/posts/2020/rn-flutter-dilemma-2-ui/</link>
      <pubDate>Tue, 07 Jan 2020 08:00:00 +0000</pubDate>
      
      <guid>https://www.marcogomiero.com/posts/2020/rn-flutter-dilemma-2-ui/</guid>
      <description>Welcome to the second part of this comparison about React Native and Flutter. In the first episode, we have introduced the two frameworks with some history and with a comparison between the languages that these two frameworks use.
If you have lost the first episode, I suggest you read it before moving on.
 Flutter or React Native, a cross-platform dilemma - Introduction - (Part 1)
 In this article, I will explain how to build user interfaces in React Native and Flutter.</description>
    </item>
    
    <item>
      <title>Flutter or React Native, a cross-platform dilemma - Introduction - (Part 1)</title>
      <link>https://www.marcogomiero.com/posts/2019/rn-flutter-dilemma-1-intro/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcogomiero.com/posts/2019/rn-flutter-dilemma-1-intro/</guid>
      <description>These days you have certainly heard about cross-platform mobile development, in particular about the &amp;ldquo;senior&amp;rdquo; React Native and the &amp;ldquo;freshman&amp;rdquo; Flutter.
Today, I want to start a series of articles to understand the two frameworks. In particular, I want to describe their differences, their weaknesses, their strength&amp;hellip; so, all you need to know to help your choice.
In this article, I want to introduce the two frameworks with a historical overview and an analysis of the languages that they use.</description>
    </item>
    
    <item>
      <title>Bottom App Bar with Menu and Swipeable Tabs in Flutter</title>
      <link>https://www.marcogomiero.com/posts/2019/bottom-bar-swipe-flutter/</link>
      <pubDate>Wed, 20 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.marcogomiero.com/posts/2019/bottom-bar-swipe-flutter/</guid>
      <description>The recent revamp of the Material Design has introduced new beautiful items, for example, the Bottom App Bar.
Image from Material Design Guidelines
With Flutter is super easy to implement like shown in the official documentation. However, for me, the tricky part is to combine it with swipeable tabs so, in this article, I’ll explain all the steps that I’ve followed to obtain it.
Here’s a spoiler of the final result:</description>
    </item>
    
  </channel>
</rss>